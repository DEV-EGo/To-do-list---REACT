[{"/Users/Edwin/Desktop/GITHUB-REPOS-PROJECTS/To-do-list---REACT/todo_app/src/reportWebVitals.js":"1","/Users/Edwin/Desktop/GITHUB-REPOS-PROJECTS/To-do-list---REACT/todo_app/src/App.js":"2","/Users/Edwin/Desktop/GITHUB-REPOS-PROJECTS/To-do-list---REACT/todo_app/src/Todo.js":"3","/Users/Edwin/Desktop/GITHUB-REPOS-PROJECTS/To-do-list---REACT/todo_app/src/firebase.js":"4","/Users/Edwin/Desktop/GITHUB-REPOS-PROJECTS/To-do-list---REACT/todo_app/src/index.js":"5"},{"size":362,"mtime":1611194879930,"results":"6","hashOfConfig":"7"},{"size":1544,"mtime":1611683135812,"results":"8","hashOfConfig":"7"},{"size":2045,"mtime":1611683137433,"results":"9","hashOfConfig":"7"},{"size":483,"mtime":1611251945048,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1611194879929,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1353nej",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/Edwin/Desktop/GITHUB-REPOS-PROJECTS/To-do-list---REACT/todo_app/src/reportWebVitals.js",[],["26","27"],"/Users/Edwin/Desktop/GITHUB-REPOS-PROJECTS/To-do-list---REACT/todo_app/src/App.js",["28"],"import React, { useState, useEffect }from 'react';\nimport Todo from './Todo';\nimport { Button, FormControl, input, InputLabel } from '@material-ui/core';\nimport './App.css';\nimport db from './firebase';\nimport firebase from 'firebase'\n\nfunction App() {\n  const [todos, setTodos] = useState(['abc','def' ]);\n  const [input, setInput] = useState('');\n\n  // when the app loads, we need to listen to the database and fetch new todos as they get added/removed\n  useEffect(() =>{\n    // this line of code ..fires when the app.js loads\n    db.collection('todos').orderBy('timestamp','desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({id: doc.id ,todo: doc.data().todo})))\n    })\n  }, []);\n\n  const addTodo =(event) => {\n    // this will work when we click the button\n    event.preventDefault();\n\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n\n    setInput(''); // clears up the input after clicking add todo button\n  }\n\n  return (\n    <div className=\"App\">\n\n      <h1>Todo List üìù </h1>\n\n    <form>\n\n      <FormControl>\n        <InputLabel> ‚úÖ Write todo</InputLabel>\n        <input value = {input} onChange = { event => setInput(event.target.value)}/>\n      </FormControl>\n\n      <Button disabled={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\">\n      Add to do \n      </Button>\n    </form>\n\n    <ul>\n      {todos.map(todo => (\n        <Todo todo={todo}/>\n      ))}\n    </ul>\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/Edwin/Desktop/GITHUB-REPOS-PROJECTS/To-do-list---REACT/todo_app/src/Todo.js",["29"],"import React, { useState } from 'react'\nimport './Todo.css';\nimport {  List, Button, ListItemAvatar, ListItem, ListItemText, Modal } from '@material-ui/core';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport db from './firebase.js';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width : 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2,4,3),\n    },\n}));\n\nfunction Todo(props) {\n    const classes = useStyles();\n    const [open,setOpen] = useState(false);\n    const [input,setInput] = useState();\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const UpdateTodo = () => {\n        // update the todo with the new input text\n        \n        db.collection('todos').doc(props.todo.id).set({\n            todo: input\n        }, { merge: true});\n\n        setOpen(false);\n    }\n    return (\n        <>\n        <Modal\n            open= {open}\n            onClose={e => setOpen(false)}\n        >\n            <div className={classes.paper}> \n                <h1>I am a modal this works</h1>\n                <input placeholder={props.todo.todo} value = {input} onChange= {event => setInput(event.target.value)}/> \n                <Button onClick={UpdateTodo}>Update Todo</Button>\n            </div>\n        </Modal>\n\n        <List>\n            <ListItem>\n                <ListItemAvatar>  \n                </ListItemAvatar>\n                <ListItemText primary= {props.todo.todo} secondary=\"Dummy deadline\" />\n            </ListItem>\n            <Button onClick={e => setOpen(true)}>Edit</Button>\n            <DeleteForeverIcon onClick={event => db.collection('todos').doc(props.todo.id).delete()}/>\n        </List>\n        </>\n    )\n}\n\nexport default Todo\n// type RFCE (react functional componet with an export) shortcut\n// PROPS are propertys that allows to differetiate one component from another","/Users/Edwin/Desktop/GITHUB-REPOS-PROJECTS/To-do-list---REACT/todo_app/src/firebase.js",[],"/Users/Edwin/Desktop/GITHUB-REPOS-PROJECTS/To-do-list---REACT/todo_app/src/index.js",[],["30","31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":3,"column":31,"nodeType":"38","messageId":"39","endLine":3,"endColumn":36},{"ruleId":"36","severity":1,"message":"40","line":24,"column":11,"nodeType":"38","messageId":"39","endLine":24,"endColumn":21},{"ruleId":"32","replacedBy":"41"},{"ruleId":"34","replacedBy":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'input' is defined but never used.","Identifier","unusedVar","'handleOpen' is assigned a value but never used.",["43"],["44"],"no-global-assign","no-unsafe-negation"]